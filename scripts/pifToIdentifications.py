# this script utilizes the pifModel class and outputs identification rates with IM (true value), withoutIM (model estimate) and after optimization (model estimate)

import pandas as pd
import numpy as np
import argparse
from  imMQExplorer.pifModel import *

parser = argparse.ArgumentParser(description='uses previously computed PIF and experimental identification rates to predict number of identifications')

parser.add_argument('pif', help='file path to .pkl file produced from computePIF.py')
parser.add_argument('pifTop', help='file path to .pkl file produced from computePIFTopScans.py')
parser.add_argument('pep', help='file path to allpeptides.txt file generated by MQ')
parser.add_argument('evi', help='file path to evidence.txt file generated by MQ')
parser.add_argument('rawFile', help='experiment name to consider features from')

args = parser.parse_args()

## load pep and evi
pep = pd.read_csv(args.pep, '\t')
evi = pd.read_csv(args.evi, '\t')

## filter to raw file
pep = pep[pep['Raw file'] == args.rawFile]
evi = evi[evi['Raw file'] == args.rawFile]

## load pif and pif Top
pif = pd.read_pickle(args.pif)
pifTop = pd.read_pickle(args.pifTop)

## create model 
model = pifModel(pif, pifTop, pep, evi)

im = model.getNumIdentified('im')
noIm = model.getNumIdentified('noIm')
imTop  = model.getNumIdentified('imTop')

print("Number Identified with Ion Mobility: {:.0f}".format(im))
print("Estimated Number Identified without Ion Mobility: {:.0f}".format(noIm))
print("Estimated Number Identified with Ion Mobility (Optimized): {:.0f}".format(imTop))
